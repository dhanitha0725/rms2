// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.DbContexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ReservationDbContext))]
    [Migration("20250429143737_ChangeTimeStampPayment")]
    partial class ChangeTimeStampPayment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Document", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DocumentID"));

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("DocumentType");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DocumentID");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Facility", b =>
                {
                    b.Property<int>("FacilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FacilityID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FacilityID"));

                    b.Property<string>("Attributes")
                        .HasColumnType("jsonb")
                        .HasColumnName("Attributes");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Description");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FacilityName");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Location");

                    b.Property<int?>("ParentFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Status");

                    b.HasKey("FacilityID");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("ParentFacilityId");

                    b.ToTable("Facilities", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.FacilityType", b =>
                {
                    b.Property<int>("FacilityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FacilityTypeID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FacilityTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("FacilityTypeId");

                    b.ToTable("FacilityType", (string)null);

                    b.HasData(
                        new
                        {
                            FacilityTypeId = 1,
                            TypeName = "Auditorium"
                        },
                        new
                        {
                            FacilityTypeId = 2,
                            TypeName = "Bungalow"
                        },
                        new
                        {
                            FacilityTypeId = 3,
                            TypeName = "Hall"
                        },
                        new
                        {
                            FacilityTypeId = 4,
                            TypeName = "Hostel"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ImageID"));

                    b.Property<int>("FacilityID")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ImageID");

                    b.HasIndex("FacilityID");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceID"));

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("AmountDue");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("AmountPaid");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("IssuedDate");

                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.HasKey("InvoiceID");

                    b.HasIndex("ReservationID");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.InvoicePayment", b =>
                {
                    b.Property<Guid>("PaymentID")
                        .HasColumnType("uuid");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID", "InvoiceID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("InvoicePayments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Package", b =>
                {
                    b.Property<int>("PackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PackageID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PackageID"));

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("Duration");

                    b.Property<int>("FacilityID")
                        .HasColumnType("int");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("PackageName");

                    b.HasKey("PackageID");

                    b.HasIndex("FacilityID");

                    b.ToTable("Packages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PaymentID");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("AmountPaid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GatewayTransactionID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Method");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int>("ReservationUserID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Status");

                    b.HasKey("PaymentID");

                    b.HasIndex("ReservationID");

                    b.HasIndex("ReservationUserID");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pricing", b =>
                {
                    b.Property<int>("PriceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PriceID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PriceID"));

                    b.Property<int>("PackageID")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("Price");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Sector");

                    b.HasKey("PriceID");

                    b.HasIndex("PackageID");

                    b.ToTable("Pricing", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReservationID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReservationID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Status");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("Total");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("userType");

                    b.HasKey("ReservationID");

                    b.ToTable("Reservations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ReservationUserDetail", b =>
                {
                    b.Property<int>("ReservationUserDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReservationUserDetailID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReservationUserDetailID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LastName");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("OrganizationName");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(15)")
                        .HasColumnName("PhoneNumber");

                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.HasKey("ReservationUserDetailID");

                    b.HasIndex("ReservationID")
                        .IsUnique();

                    b.ToTable("ReservationUserDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ReservedPackage", b =>
                {
                    b.Property<int>("ReservedPackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReservedPackageID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReservedPackageID"));

                    b.Property<int>("PackageID")
                        .HasColumnType("integer");

                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ReservedPackageID");

                    b.HasIndex("PackageID");

                    b.HasIndex("ReservationID");

                    b.ToTable("ReservedPackages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ReservedRoom", b =>
                {
                    b.Property<int>("ReservedRoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReservedRoomID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReservedRoomID"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate");

                    b.HasKey("ReservedRoomID");

                    b.HasIndex("ReservationID");

                    b.HasIndex("RoomID");

                    b.ToTable("ReservedRooms", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoomID"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("Capacity");

                    b.Property<int>("FacilityID")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfBeds")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfBeds");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Type");

                    b.HasKey("RoomID");

                    b.HasIndex("FacilityID");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RoomPricing", b =>
                {
                    b.Property<int>("RoomPricingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoomPricingID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoomPricingID"));

                    b.Property<int>("FacilityID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Price");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("RoomType");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Sector");

                    b.HasKey("RoomPricingID");

                    b.HasIndex("FacilityID");

                    b.ToTable("RoomPricing", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Role");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Document", b =>
                {
                    b.HasOne("Domain.Entities.Payment", "Payment")
                        .WithMany("Documents")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Documents_Payments");

                    b.HasOne("Domain.Entities.Reservation", "Reservation")
                        .WithMany("Documents")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Documents_Reservations");

                    b.Navigation("Payment");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Domain.Entities.Facility", b =>
                {
                    b.HasOne("Domain.Entities.FacilityType", "FacilityType")
                        .WithMany("Facilities")
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Facility", "ParentFacility")
                        .WithMany("ChildFacilities")
                        .HasForeignKey("ParentFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FacilityType");

                    b.Navigation("ParentFacility");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.HasOne("Domain.Entities.Facility", "Facility")
                        .WithMany("Images")
                        .HasForeignKey("FacilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.HasOne("Domain.Entities.Reservation", "Reservation")
                        .WithMany("Invoices")
                        .HasForeignKey("ReservationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Domain.Entities.InvoicePayment", b =>
                {
                    b.HasOne("Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Payment", "Payment")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Domain.Entities.Package", b =>
                {
                    b.HasOne("Domain.Entities.Facility", "Facility")
                        .WithMany("Packages")
                        .HasForeignKey("FacilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.HasOne("Domain.Entities.Reservation", "Reservation")
                        .WithMany("Payments")
                        .HasForeignKey("ReservationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ReservationUserDetail", "User")
                        .WithMany("Payments")
                        .HasForeignKey("ReservationUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Pricing", b =>
                {
                    b.HasOne("Domain.Entities.Package", "Package")
                        .WithMany("Pricings")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Domain.Entities.ReservationUserDetail", b =>
                {
                    b.HasOne("Domain.Entities.Reservation", "Reservation")
                        .WithOne("ReservationUserDetail")
                        .HasForeignKey("Domain.Entities.ReservationUserDetail", "ReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Domain.Entities.ReservedPackage", b =>
                {
                    b.HasOne("Domain.Entities.Package", "Package")
                        .WithMany("ReservedPackages")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Reservation", "Reservation")
                        .WithMany("ReservedPackages")
                        .HasForeignKey("ReservationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Domain.Entities.ReservedRoom", b =>
                {
                    b.HasOne("Domain.Entities.Reservation", "Reservation")
                        .WithMany("ReservedRooms")
                        .HasForeignKey("ReservationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Room", "Room")
                        .WithMany("ReservedRooms")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.HasOne("Domain.Entities.Facility", "Facility")
                        .WithMany("Rooms")
                        .HasForeignKey("FacilityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Domain.Entities.RoomPricing", b =>
                {
                    b.HasOne("Domain.Entities.Facility", "Facility")
                        .WithMany("RoomPricings")
                        .HasForeignKey("FacilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Domain.Entities.Facility", b =>
                {
                    b.Navigation("ChildFacilities");

                    b.Navigation("Images");

                    b.Navigation("Packages");

                    b.Navigation("RoomPricings");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Domain.Entities.FacilityType", b =>
                {
                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.Navigation("InvoicePayments");
                });

            modelBuilder.Entity("Domain.Entities.Package", b =>
                {
                    b.Navigation("Pricings");

                    b.Navigation("ReservedPackages");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("InvoicePayments");
                });

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Invoices");

                    b.Navigation("Payments");

                    b.Navigation("ReservationUserDetail")
                        .IsRequired();

                    b.Navigation("ReservedPackages");

                    b.Navigation("ReservedRooms");
                });

            modelBuilder.Entity("Domain.Entities.ReservationUserDetail", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Navigation("ReservedRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
